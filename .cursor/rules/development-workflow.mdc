---
description: 
globs: 
alwaysApply: true
---
# 开发工作流程规则

## 代码质量约束

### API 接口开发规范

1. 在开发 API 接口时全部的接口应该放到 api 文件夹下
2. 在开发某一类接口时应该进行归类，在 api 文件夹下创建相应的文件目录并在这个目录下定义相对应的接口数据类型及其接口

### 错误处理规范

```typescript
// 组件中的API调用示例
const fetchData = async () => {
  try {
    // 直接使用返回的数据，错误已在拦截器中处理
    const response = await ai.getPosts();
    if(response.code===0) {
        setData(response.data);
    }
  } catch (error) {
    // 仅处理组件特定的错误逻辑
    console.error('获取数据失败:', error);
  }
};
```

### 性能优化要求

1. 使用 React.memo 优化组件渲染
2. 大列表使用虚拟滚动
3. 图片懒加载
4. 代码分割和动态导入
5. 合理使用 useMemo 和 useCallback

## 开发环境配置

### 必需的 VS Code 插件

- ES7+ React/Redux/React-Native snippets
- Prettier - Code formatter
- ESLint
- Tailwind CSS IntelliSense
- TypeScript Importer

### 环境变量管理

```typescript
// .env.local 示例
REACT_APP_API_BASE_URL=http://localhost:3000/api
REACT_APP_UPLOAD_URL=http://localhost:3000/upload
```

## AI 协作约束

### 代码生成要求

1. 生成的代码必须符合项目的 TypeScript 规范
2. 组件必须包含完整的类型定义
3. 样式使用 Tailwind CSS 类名
4. 包含必要的错误处理和加载状态
5. 遵循 React Hooks 最佳实践

### 文件修改原则

1. 修改现有文件时保持原有代码风格
2. 添加新功能时不破坏现有功能
3. 删除代码前确认没有依赖关系
