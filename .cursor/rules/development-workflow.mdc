---
description: 
globs: 
alwaysApply: true
---
# 开发工作流程规则

## 代码质量约束

### 代码提交规范
1. 提交前必须通过 ESLint 和 Prettier 检查
2. 使用语义化的 commit 信息：
   - `feat:` 新功能
   - `fix:` 修复 bug
   - `docs:` 文档更新
   - `style:` 代码格式调整
   - `refactor:` 代码重构
   - `test:` 测试相关

### 错误处理规范
```typescript
// API 调用错误处理
try {
  const response = await api.getPosts();
  setData(response.data);
} catch (error) {
  console.error('获取文章失败:', error);
  message.error('获取文章失败，请稍后重试');
}

// 组件错误边界
const ErrorBoundary: FC<{ children: ReactNode }> = ({ children }) => {
  // 实现错误边界逻辑
};
```

### 性能优化要求
1. 使用 React.memo 优化组件渲染
2. 大列表使用虚拟滚动
3. 图片懒加载
4. 代码分割和动态导入
5. 合理使用 useMemo 和 useCallback

## 开发环境配置

### 必需的 VS Code 插件
- ES7+ React/Redux/React-Native snippets
- Prettier - Code formatter
- ESLint
- Tailwind CSS IntelliSense
- TypeScript Importer

### 调试配置
1. 使用 React DevTools 调试组件状态
2. 使用 Network 面板调试 API 请求
3. 使用 console.log 进行简单调试
4. 复杂逻辑使用断点调试

### 环境变量管理
```typescript
// .env.local 示例
REACT_APP_API_BASE_URL=http://localhost:3000/api
REACT_APP_UPLOAD_URL=http://localhost:3000/upload
```

## AI 协作约束

### 代码生成要求
1. 生成的代码必须符合项目的 TypeScript 规范
2. 组件必须包含完整的类型定义
3. 样式使用 Tailwind CSS 类名
4. 包含必要的错误处理和加载状态
5. 遵循 React Hooks 最佳实践

### 文件修改原则
1. 修改现有文件时保持原有代码风格
2. 添加新功能时不破坏现有功能
3. 重构代码时保持向后兼容
4. 删除代码前确认没有依赖关系
